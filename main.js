/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var D=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var S=Object.prototype.hasOwnProperty;var M=(c,e)=>{for(var t in e)D(c,t,{get:e[t],enumerable:!0})},C=(c,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of E(e))!S.call(c,a)&&a!==t&&D(c,a,{get:()=>e[a],enumerable:!(i=k(e,a))||i.enumerable});return c};var b=c=>C(D({},"__esModule",{value:!0}),c);var Y={};M(Y,{default:()=>p});module.exports=b(Y);var y=require("obsidian");var g=class{constructor(e,t,i,a){if(this.container=e,this.data=t,this.options=i,this.onUpdate=a,Object.keys(this.data.goals).length===0){let n=new Date;this.currentYear=n.getFullYear(),this.currentMonth=n.getMonth()}else{let n=new URLSearchParams(window.location.hash.slice(1));this.currentYear=parseInt(n.get("year")||new Date().getFullYear().toString()),this.currentMonth=parseInt(n.get("month")||new Date().getMonth().toString())}}async updateGoal(e,t){this.data.goals[e]=!t,await this.onUpdate(this.data)}updateUrlParams(){let e=new URLSearchParams(window.location.hash.slice(1));e.set("year",this.currentYear.toString()),e.set("month",this.currentMonth.toString()),window.history.replaceState(null,"",`#${e.toString()}`)}navigateToDate(e,t){this.currentYear=e,t!==void 0&&(this.currentMonth=t),this.updateUrlParams(),this.render()}render(){switch(this.container.empty(),this.container.createEl("h3",{text:this.options.title,cls:"goal-tracker-title"}),this.renderCalendarControls(),this.options.type){case"monthly":this.renderMonthlyView();break;case"weekly":this.renderWeeklyView();break;case"daily":default:this.renderDailyView()}}renderMonthlyView(){let e=this.container.createEl("div",{cls:"goal-tracker-calendar monthly"});for(let t=0;t<12;t++){let i=(t+1).toString().padStart(2,"0"),a=`${this.currentYear}-${i}`,n=this.data.goals[a]??!1,l=e.createEl("div",{cls:`calendar-cell ${n?"completed":""}`,text:new Date(2024,t).toLocaleString("default",{month:"short"})});l.addEventListener("click",async()=>{this.data.goals[a]=!n,await this.onUpdate(this.data),l.toggleClass("completed",!n)})}}renderWeeklyView(){let e=this.container.createEl("div",{cls:"goal-tracker-calendar weekly"}),t=new Date(this.currentYear,this.currentMonth,1),i=new Date(this.currentYear,this.currentMonth+1,0),a=new Date(t),n=a.getDay();for(a.setDate(a.getDate()-(n===0?6:n-1));a<=i;){let l=new Date(a);l.setDate(l.getDate()+6);let s=this.getWeekNumber(a),o=this.getWeekYear(a),r=new Date(a);if(r.setDate(r.getDate()+3),r.getMonth()===this.currentMonth&&r.getFullYear()===this.currentYear){let d=e.createEl("div",{cls:"week-row"}),u=`${o}-W${s}`,m=this.data.goals[u]??!1,f=`${a.getDate()} ${a.toLocaleString("default",{month:"short"})} - ${l.getDate()} ${l.toLocaleString("default",{month:"short"})}`,v=d.createEl("div",{cls:"week-info"});v.createEl("span",{text:`Week ${s}`,cls:"week-number"}),v.createEl("span",{text:f,cls:"week-dates"});let w=d.createEl("div",{cls:`calendar-cell ${m?"completed":""}`});w.addEventListener("click",async()=>{this.data.goals[u]=!m,await this.onUpdate(this.data),w.toggleClass("completed",!m)})}a.setDate(a.getDate()+7)}}renderDailyView(){let e=this.container.createEl("div",{cls:"goal-tracker-calendar"}),t=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],i=e.createEl("div",{cls:"calendar-row"});t.forEach(r=>{i.createEl("div",{cls:"calendar-cell header",text:r})});let a=new Date(this.currentYear,this.currentMonth,1),l=new Date(this.currentYear,this.currentMonth+1,0).getDate(),s=a.getDay(),o=e.createEl("div",{cls:"calendar-row"});for(let r=0;r<s;r++)o.createEl("div",{cls:"calendar-cell empty"});for(let r=1;r<=l;r++){(r+s-1)%7===0&&r!==1&&(o=e.createEl("div",{cls:"calendar-row"}));let h=`${this.currentYear}-${(this.currentMonth+1).toString().padStart(2,"0")}-${r.toString().padStart(2,"0")}`,d=this.data.goals[h]??!1,u=o.createEl("div",{cls:`calendar-cell ${d?"completed":""}`,text:r.toString()});u.addEventListener("click",async()=>{this.data.goals[h]=!d,await this.onUpdate(this.data),u.toggleClass("completed",!d)})}}getWeekYear(e){let t=new Date(e);return t.setDate(t.getDate()+3-(t.getDay()+6)%7),t.getFullYear()}getWeekNumber(e){let t=new Date(e.valueOf()),i=(e.getDay()+6)%7;t.setDate(t.getDate()-i+3);let a=t.valueOf();return t.setMonth(0,1),t.getDay()!==4&&t.setMonth(0,1+(4-t.getDay()+7)%7),1+Math.ceil((a-t.valueOf())/6048e5)}renderCalendarControls(){let e=this.container.createEl("div",{cls:"goal-tracker-controls"}),t=e.createEl("button",{text:"←"}),i=e.createEl("span",{text:this.currentYear.toString(),cls:"year-display"}),a=e.createEl("button",{text:"→"});if(this.options.type==="monthly"){t.addEventListener("click",()=>{this.navigateToDate(this.currentYear-1)}),a.addEventListener("click",()=>{this.navigateToDate(this.currentYear+1)});return}let n=e.createEl("select");["January","February","March","April","May","June","July","August","September","October","November","December"].forEach((s,o)=>{let r=n.createEl("option",{text:s,value:o.toString()});o===this.currentMonth&&(r.selected=!0)}),n.addEventListener("change",s=>{this.navigateToDate(this.currentYear,parseInt(s.target.value))}),t.addEventListener("click",()=>{this.currentMonth===0?this.navigateToDate(this.currentYear-1,11):this.navigateToDate(this.currentYear,this.currentMonth-1),n.value=this.currentMonth.toString()}),a.addEventListener("click",()=>{this.currentMonth===11?this.navigateToDate(this.currentYear+1,0):this.navigateToDate(this.currentYear,this.currentMonth+1),n.value=this.currentMonth.toString()})}};var p=class extends y.Plugin{async onload(){this.registerMarkdownCodeBlockProcessor("goal-calendar",async(e,t,i)=>{let a,n={type:"daily",title:"Goal tracker"};try{let s=e.trim().split(`
`);for(;s.length>0&&s[0].includes(":");){let[r,h]=s[0].split(":"),d=r.trim(),u=h.trim();d==="type"?n.type=u:d==="title"&&(n.title=u),s.shift()}let o=s.join(`
`);o.trim()?a=JSON.parse(o):a={id:crypto.randomUUID(),type:n.type,title:n.title,goals:{}},a.title=n.title}catch(s){console.error("Failed to parse calendar data",s),a={id:crypto.randomUUID(),type:n.type,title:n.title,goals:{}}}new g(t,a,n,async s=>{let o=this.app.vault.getAbstractFileByPath(i.sourcePath);if(!(o instanceof y.TFile)){console.error("Could not find source file");return}await this.app.vault.process(o,r=>{let h=i.getSectionInfo(t);return h?this.updateCalendarBlock(r,h,`type: ${n.type}
title: ${n.title}
${JSON.stringify(s,null,2)}`):(console.error("Could not find section info"),r)})}).render()})}updateCalendarBlock(e,t,i){let a=e.split(`
`),n=t.lineStart,l=t.lineEnd,s=a.slice(0,n+1).join(`
`),o=a.slice(l).join(`
`);return`${s}
${i}
${o}`}};
